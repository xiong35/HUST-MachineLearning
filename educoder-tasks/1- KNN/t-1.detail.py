# encoding=utf8
import numpy as np


class kNNClassifier(object):
    def __init__(self, k):
        '''
        初始化函数
        :param k:kNN算法中的k
        '''
        self.k = k
        self.train_feature = None
        self.train_label = None

    def fit(self, feature, label):
        '''
        kNN算法的训练过程
        :param feature: 训练集数据，类型为ndarray
        :param label: 训练集标签，类型为ndarray
        :return: 无返回
        '''

        # 直接将数据保存为属性即可
        # 需注意此处 feature 是一个多维数组(一个样本会多个特征而不是只有一个)
        self.train_feature = feature
        # label 则是一个一维数组
        self.train_label = label

    def predict(self, feature):
        '''
        kNN算法的预测过程
        :param feature: 测试集数据，类型为ndarray
        :return: 预测结果，类型为ndarray或list
        '''

        # 创建一个空数组, 将返回的预测结果存在此处
        result = []

        # 对于每个待分类的数据
        for feat in feature:
            # 计算当前样本和(对两个形状相同的 ndarray 做减法会返回一个对应位置的项相减的同样大小的 ndarray)
            # train_feature 是训练样本集, 其中每一项都和 feat 有同样的长度(即特征数)
            # M*N的 ndarray (记作`A`) 减去 1*N 的 ndarray (记作`b`) 会进行如下操作:
            #    将`b` copy M 份并合在一起, 产生一个新的 ndarray (记作`B`), 它与`A`有相同的形状
            #    `A` 中的每一项 减去 `B` 中同样位置的项(A[i][j] - B[i][j])
            #    返回运算后的 `A`
            # 所以此处的 diff 是一个二维数组, 含义为每一个训练数据和当前待测试数据对应项的差值
            diff = self.train_feature - feat

            # 计算出的 dist 为每个训练数据和当前测试数据的欧氏距离(一维数组)
            sq_diff = diff ** 2
            dist = sq_diff.sum(axis=1) ** 0.5

            # 将欧氏距离升序排序, argsort 不会返回排序后的 数组, 而是其 index
            # 58 行的 sorted_labels 即为其用法, 对 train_label 调用这份 index 即可将 train_label 按照 dist 的顺序排序
            dist_index = dist.argsort()
            # sorted_labels 即 把所有 train_label 按照((其对应的测试数据)和(样本的距离)升序排序的顺序)进行排序
            sorted_labels = self.train_label[dist_index]

            # 用来数每个邻居的标签的种类数的字典
            class_count = {}
            for i in range(self.k):
                # sorted_labels 中的前 k 个即是需要考虑的 k nearest neighbors
                label = sorted_labels[i]
                # 如果还没记录过当前标签, 则将其数量设置为1, 否则此数量++
                class_count[label] = class_count.get(label, 0) + 1
            # sorted_class_count 是一个 tuple 的数组, 其中每个 tuple 为 `(标签, 数量)`, 此数组按`数量`降序排序
            sorted_class_count = sorted(
                class_count.items(), key=lambda x: x[1], reverse=True)
            # sorted_class_count[0][0] 即 `数量`最多元组 的 标签字段, 即最后预测的标签, 将其加入结果数组中
            result.append(sorted_class_count[0][0])

        # 返回结果数组
        return result

#******************************#
#          测试如下            #
# (数据为educoder上的测试数据) #
#******************************#


feats = np.array([[6.5, 2.8, 4.6, 1.5],
                  [6.7, 2.5, 5.8, 1.8],
                  [6.8, 3.0, 5.5, 2.1],
                  [5.1, 3.5, 1.4, 0.3],
                  [6.0, 2.2, 5.0, 1.5],
                  [6.3, 2.9, 5.6, 1.8],
                  [6.6, 2.9, 4.6, 1.3],
                  [7.7, 2.6, 6.9, 2.3],
                  [5.7, 3.8, 1.7, 0.3],
                  [5.0, 3.6, 1.4, 0.2],
                  [4.8, 3.0, 1.4, 0.3],
                  [5.2, 2.7, 3.9, 1.4],
                  [5.1, 3.4, 1.5, 0.2],
                  [5.5, 3.5, 1.3, 0.2],
                  [7.7, 3.8, 6.7, 2.2],
                  [6.9, 3.1, 5.4, 2.1],
                  [7.3, 2.9, 6.3, 1.8],
                  [6.4, 2.8, 5.6, 2.2],
                  [6.2, 2.8, 4.8, 1.8],
                  [6.0, 3.4, 4.5, 1.6],
                  [7.7, 2.8, 6.7, 2.0],
                  [5.7, 3.0, 4.2, 1.2],
                  [4.8, 3.4, 1.6, 0.2],
                  [5.7, 2.5, 5.0, 2.0],
                  [6.3, 2.7, 4.9, 1.8],
                  [4.8, 3.0, 1.4, 0.1],
                  [4.7, 3.2, 1.3, 0.2],
                  [6.5, 3.0, 5.8, 2.2],
                  [4.6, 3.4, 1.4, 0.3],
                  [6.1, 3.0, 4.9, 1.8],
                  [6.5, 3.2, 5.1, 2.0],
                  [6.7, 3.1, 4.4, 1.4],
                  [5.7, 2.8, 4.5, 1.3],
                  [6.7, 3.3, 5.7, 2.5],
                  [6.0, 3.0, 4.8, 1.8],
                  [5.1, 3.8, 1.6, 0.2],
                  [6.0, 2.2, 4.0, 1.0],
                  [6.4, 2.9, 4.3, 1.3],
                  [6.5, 3.0, 5.5, 1.8],
                  [5.0, 2.3, 3.3, 1.0],
                  [6.3, 3.3, 6.0, 2.5],
                  [5.5, 2.5, 4.0, 1.3],
                  [5.4, 3.7, 1.5, 0.2],
                  [4.9, 3.1, 1.5, 0.1],
                  [5.2, 4.1, 1.5, 0.1],
                  [6.7, 3.3, 5.7, 2.1],
                  [4.4, 3.0, 1.3, 0.2],
                  [6.0, 2.7, 5.1, 1.6],
                  [6.4, 2.7, 5.3, 1.9],
                  [5.9, 3.0, 5.1, 1.8],
                  [5.2, 3.5, 1.5, 0.2],
                  [5.1, 3.3, 1.7, 0.5],
                  [5.8, 2.7, 4.1, 1.0],
                  [4.9, 3.1, 1.5, 0.1],
                  [7.4, 2.8, 6.1, 1.9],
                  [6.2, 2.9, 4.3, 1.3],
                  [7.6, 3.0, 6.6, 2.1],
                  [6.7, 3.0, 5.2, 2.3],
                  [6.3, 2.3, 4.4, 1.3],
                  [6.2, 3.4, 5.4, 2.3],
                  [7.2, 3.6, 6.1, 2.5],
                  [5.6, 2.9, 3.6, 1.3],
                  [5.7, 4.4, 1.5, 0.4],
                  [5.8, 2.7, 3.9, 1.2],
                  [4.5, 2.3, 1.3, 0.3],
                  [5.5, 2.4, 3.8, 1.1],
                  [6.9, 3.1, 4.9, 1.5],
                  [5.0, 3.4, 1.6, 0.4],
                  [6.8, 2.8, 4.8, 1.4],
                  [5.0, 3.5, 1.6, 0.6],
                  [4.8, 3.4, 1.9, 0.2],
                  [6.3, 3.4, 5.6, 2.4],
                  [5.6, 2.8, 4.9, 2.0],
                  [6.8, 3.2, 5.9, 2.3],
                  [5.0, 3.3, 1.4, 0.2],
                  [5.1, 3.7, 1.5, 0.4],
                  [5.9, 3.2, 4.8, 1.8],
                  [4.6, 3.1, 1.5, 0.2],
                  [5.8, 2.7, 5.1, 1.9],
                  [4.8, 3.1, 1.6, 0.2],
                  [6.5, 3.0, 5.2, 2.0],
                  [4.9, 2.5, 4.5, 1.7],
                  [4.6, 3.2, 1.4, 0.2],
                  [6.4, 3.2, 5.3, 2.3],
                  [4.3, 3.0, 1.1, 0.1],
                  [5.6, 3.0, 4.1, 1.3],
                  [4.4, 2.9, 1.4, 0.2],
                  [5.5, 2.4, 3.7, 1.0],
                  [5.0, 2.0, 3.5, 1.0],
                  [5.1, 3.5, 1.4, 0.2],
                  [4.9, 3.0, 1.4, 0.2],
                  [4.9, 2.4, 3.3, 1.0],
                  [4.6, 3.6, 1.0, 0.2],
                  [5.9, 3.0, 4.2, 1.5],
                  [6.1, 2.9, 4.7, 1.4],
                  [5.0, 3.4, 1.5, 0.2],
                  [6.7, 3.1, 4.7, 1.5],
                  [5.7, 2.9, 4.2, 1.3],
                  [6.2, 2.2, 4.5, 1.5],
                  [7.0, 3.2, 4.7, 1.4],
                  [5.8, 2.7, 5.1, 1.9],
                  [5.4, 3.4, 1.7, 0.2],
                  [5.0, 3.0, 1.6, 0.2],
                  [6.1, 2.6, 5.6, 1.4],
                  [6.1, 2.8, 4.0, 1.3],
                  [7.2, 3.0, 5.8, 1.6],
                  [5.7, 2.6, 3.5, 1.0],
                  [6.3, 2.8, 5.1, 1.5],
                  [6.4, 3.1, 5.5, 1.8],
                  [6.3, 2.5, 4.9, 1.5],
                  [6.7, 3.1, 5.6, 2.4],
                  [4.9, 3.1, 1.5, 0.1]])
labels = np.array([1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 2, 2, 0, 0, 2, 0, 2, 2, 1, 1, 2, 0, 1,
                   1, 2, 1, 2, 1, 0, 0, 0, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 1, 2, 2, 1, 2, 2, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 2, 2, 2,
                   0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 2,
                   0, 0])
test = np.array([[5.8, 4.0, 1.2, 0.2],
                 [5.1, 2.5, 3.0, 1.1],
                 [6.6, 3.0, 4.4, 1.4],
                 [5.4, 3.9, 1.3, 0.4],
                 [7.9, 3.8, 6.4, 2.0],
                 [6.3, 3.3, 4.7, 1.6],
                 [6.9, 3.1, 5.1, 2.3],
                 [5.1, 3.8, 1.9, 0.4],
                 [4.7, 3.2, 1.6, 0.2],
                 [6.9, 3.2, 5.7, 2.3],
                 [5.6, 2.7, 4.2, 1.3],
                 [5.4, 3.9, 1.7, 0.4],
                 [7.1, 3.0, 5.9, 2.1],
                 [6.4, 3.2, 4.5, 1.5],
                 [6.0, 2.9, 4.5, 1.5],
                 [4.4, 3.2, 1.3, 0.2],
                 [5.8, 2.6, 4.0, 1.2],
                 [5.6, 3.0, 4.5, 1.5],
                 [5.4, 3.4, 1.5, 0.4],
                 [5.0, 3.2, 1.2, 0.2],
                 [5.5, 2.6, 4.4, 1.2],
                 [5.4, 3.0, 4.5, 1.5],
                 [6.7, 3.0, 5.0, 1.7],
                 [5.0, 3.5, 1.3, 0.3],
                 [7.2, 3.2, 6.0, 1.8],
                 [5.7, 2.8, 4.1, 1.3],
                 [5.5, 4.2, 1.4, 0.2],
                 [5.1, 3.8, 1.5, 0.3],
                 [6.1, 2.8, 4.7, 1.2],
                 [6.3, 2.5, 5.0, 1.9],
                 [6.1, 3.0, 4.6, 1.4],
                 [7.7, 3.0, 6.1, 2.3],
                 [5.6, 2.5, 3.9, 1.1],
                 [6.4, 2.8, 5.6, 2.1],
                 [5.8, 2.8, 5.1, 2.4],
                 [5.3, 3.7, 1.5, 0.2],
                 [5.5, 2.3, 4.0, 1.3],
                 [5.2, 3.4, 1.4, 0.2]])


classifier = kNNClassifier(3)
classifier.fit(feats, labels)

result = classifier.predict(test)

print(result)
